plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.dyslexia'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	all*.exclude group: 'org.slf4j', module: 'slf4j-simple'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'io.github.cdimascio:dotenv-java:3.0.0'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
	implementation 'io.github.sashirestela:simple-openai:3.19.4'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'net.sourceforge.tess4j:tess4j:5.5.0'
	implementation 'org.apache.pdfbox:pdfbox:2.0.30'

	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
}

tasks.named('test') {
	useJUnitPlatform()
}

//def querydslDir = "$buildDir/generated/querydsl"
//
//sourceSets {
//	main.java.srcDir querydslDir
//}
//
//tasks.register('initQuerydslSourcesDir') {
//	doLast {
//		if (!file(querydslDir).exists()) {
//			file(querydslDir).mkdirs()
//		}
//	}
//}
//
//tasks.named('compileJava') {
//	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
//	dependsOn('initQuerydslSourcesDir')
//}
//
//tasks.named('clean') {
//	doLast {
//		file(querydslDir).deleteDir()
//	}
//}